name: ibank
services:
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.3
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      # при использовании localhost примерно через минуту приходилось повторно авторизоваться
      # в web-интерфейсе (указанное значение используется для подписи токена в атрибуте iss)
      KC_HOSTNAME: host.docker.internal
      # порт в контейнере должен совпадать с портом, открытым на localhost т.к. порт фактического
      # подключения попадает в iss токена и в случае разных портов будет разный iss и ошибка
      # при авторизации по одному из токенов (явно зафиксировать порт для iss не удалось)
      KC_HTTP_PORT: 8954
      KC_HTTP_ENABLED: "true"
      # Включаем импорт реалма при старте
      KC_IMPORT: /opt/keycloak/data/import/ibank.realm.json
    command: ["start-dev", "--hostname-strict=false", "--import-realm"]
    ports:
      - "8954:8954"
    volumes:
      - ./keycloak/import:/opt/keycloak/data/import

  postgres:
    image: postgres:17.2-alpine3.20
    restart: always
    # set shared memory limit (reason: https://hub.docker.com/_/postgres)
    shm_size: 128mb
    ports:
      - "8955:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      # run scripts for create roles and databases
      - ./postgres/init:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  front-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        MODULE_NAME: front-service
        USAGE_MODULE: accounts-service
        USAGE_MODULE2: cash-service
        USAGE_MODULE3: transfer-service
        USAGE_MODULE4: exchange-service
    image: ibank-front-service:${TAG:-latest}
    ports:
      - "8880:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      accounts-service:
        condition: service_healthy
    healthcheck:
      test: >
        sh -c '
          curl -sf http://localhost:8080/actuator/health |
          grep -q '"'"'"status":"UP"'"'"' || exit 1
        '
      interval: 5s
      timeout: 5s
      retries: 10

  accounts-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        MODULE_NAME: accounts-service
        USAGE_MODULE: notify-service
    ports:
      - "8962:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: >
        sh -c '
          curl -sf http://localhost:8080/actuator/health |
          grep -q '"'"'"status":"UP"'"'"' || exit 1
        '
      interval: 5s
      timeout: 5s
      retries: 10

  cash-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        MODULE_NAME: cash-service
        USAGE_MODULE: accounts-service
        USAGE_MODULE2: blocker-service
        USAGE_MODULE3: notify-service
    ports:
      - "8963:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: >
        sh -c '
          curl -sf http://localhost:8080/actuator/health |
          grep -q '"'"'"status":"UP"'"'"' || exit 1
        '
      interval: 5s
      timeout: 5s
      retries: 10

  transfer-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        MODULE_NAME: transfer-service
        USAGE_MODULE: accounts-service
        USAGE_MODULE2: blocker-service
        USAGE_MODULE3: exchange-service
        USAGE_MODULE4: notify-service
    ports:
      - "8964:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: >
        sh -c '
          curl -sf http://localhost:8080/actuator/health |
          grep -q '"'"'"status":"UP"'"'"' || exit 1
        '
      interval: 5s
      timeout: 5s
      retries: 10

  exchange-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        MODULE_NAME: exchange-service
    ports:
      - "8965:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: >
        sh -c '
          curl -sf http://localhost:8080/actuator/health |
          grep -q '"'"'"status":"UP"'"'"' || exit 1
        '
      interval: 5s
      timeout: 5s
      retries: 10

  exrate-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        MODULE_NAME: exrate-service
        USAGE_MODULE: exchange-service
    ports:
      - "8966:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      exchange-service:
        condition: service_healthy
    healthcheck:
      test: >
        sh -c '
          curl -sf http://localhost:8080/actuator/health |
          grep -q '"'"'"status":"UP"'"'"' || exit 1
        '
      interval: 5s
      timeout: 5s
      retries: 10

  blocker-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        MODULE_NAME: blocker-service
    ports:
      - "8967:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: >
        sh -c '
          curl -sf http://localhost:8080/actuator/health |
          grep -q '"'"'"status":"UP"'"'"' || exit 1
        '
      interval: 5s
      timeout: 5s
      retries: 10

  notify-service:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        MODULE_NAME: notify-service
    ports:
      - "8968:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: >
        sh -c '
          curl -sf http://localhost:8080/actuator/health |
          grep -q '"'"'"status":"UP"'"'"' || exit 1
        '
      interval: 5s
      timeout: 5s
      retries: 10

  # Фиктивный сервис, который проверят healthcheck сервисов, от которых не зависят другие сервисы
  health-checker:
    image: alpine
    command: sh -c "exit 0"  # Ничего не делает, просто завершается
    depends_on:
      front-service:
        condition: service_healthy
      accounts-service:
        condition: service_healthy
      cash-service:
        condition: service_healthy
      transfer-service:
        condition: service_healthy
      exchange-service:
        condition: service_healthy
      exrate-service:
        condition: service_healthy
      blocker-service:
        condition: service_healthy
      notify-service:
        condition: service_healthy
volumes:
  postgres_data:
